The return statement immediately exits the current function, hook, or even handler.

    For a function, the specified expression (if any) is evaluated and returned.

    A return statement in a hook or event handler cannot return a value bacause event handlers and hooks
    do not have return types. Treat a return, in this situation, as a short-circuit in the execution
    and a possible processing optimization - test early, return often.

Example:

function my_func(): string
{
    return "Returning now";
}

event my_event(n: count)
{
    if ( n == 0 ) {
        return;
    }
    print n;
}

There is a special form of the return statement that is only allowed in functions. Syntactically, it looks like a when statement
immediately preceded by the return keywork. This form of the return statement is used to specify a function that delays its result (such a
function can only be called in the expression of a when statement). The function returns at the time the when statement's condition becomes true,
and the function returns the value that the when statement's body returns (of if the condition does not become true within the specified timeout inteval, 
then the function returns the value that the timeout block returns).


